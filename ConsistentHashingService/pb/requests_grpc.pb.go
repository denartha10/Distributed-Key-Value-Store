// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RequestsClient is the client API for Requests service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RequestsClient interface {
	AddNode(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	LocateKey(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error)
}

type requestsClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestsClient(cc grpc.ClientConnInterface) RequestsClient {
	return &requestsClient{cc}
}

func (c *requestsClient) AddNode(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/requests.Requests/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestsClient) LocateKey(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error) {
	out := new(LocationResponse)
	err := c.cc.Invoke(ctx, "/requests.Requests/LocateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestsServer is the server API for Requests service.
// All implementations must embed UnimplementedRequestsServer
// for forward compatibility
type RequestsServer interface {
	AddNode(context.Context, *AddRequest) (*AddResponse, error)
	LocateKey(context.Context, *LocationRequest) (*LocationResponse, error)
	mustEmbedUnimplementedRequestsServer()
}

// UnimplementedRequestsServer must be embedded to have forward compatible implementations.
type UnimplementedRequestsServer struct {
}

func (UnimplementedRequestsServer) AddNode(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedRequestsServer) LocateKey(context.Context, *LocationRequest) (*LocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateKey not implemented")
}
func (UnimplementedRequestsServer) mustEmbedUnimplementedRequestsServer() {}

// UnsafeRequestsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestsServer will
// result in compilation errors.
type UnsafeRequestsServer interface {
	mustEmbedUnimplementedRequestsServer()
}

func RegisterRequestsServer(s grpc.ServiceRegistrar, srv RequestsServer) {
	s.RegisterService(&Requests_ServiceDesc, srv)
}

func _Requests_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestsServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/requests.Requests/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestsServer).AddNode(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Requests_LocateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestsServer).LocateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/requests.Requests/LocateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestsServer).LocateKey(ctx, req.(*LocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Requests_ServiceDesc is the grpc.ServiceDesc for Requests service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Requests_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "requests.Requests",
	HandlerType: (*RequestsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _Requests_AddNode_Handler,
		},
		{
			MethodName: "LocateKey",
			Handler:    _Requests_LocateKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "requests.proto",
}
